---
title: 'Vim Backup-Copy'
date: 2025-06-12T21:41:46+07:00
draft: false
description: ''
tags: ['vim']
---

Outline:

- i found out the behaviour of vim and neovim when writing a copy of `tail -f` program in C
- manual documentation https://vimdoc.sourceforge.net/htmldoc/options.html

--- 

While writing a custom version of the tail -f command in C, I stumbled upon an 
interesting behavior in the Vim/Neovim text editors. The purpose of the program is 
to continuously print any new data appended to the end of a file—just like tail -f,
which is commonly used for watching log files.

In my implementation, I have something like this:

```c
const char *filename = argv[1];
int fd = open(filename, O_RDONLY);
if (fd == -1) {
	perror("open");
	return 1;
}
```


The open() function, provided by #include <fcntl.h>, returns a file descriptor—a 
small, nonnegative integer that acts as an index into the process’s table of 
open file descriptors.

If you check the man page for open using man 2 open, you’ll find this line:

```
Each open() of a file creates a new open file description; thus,
there may be multiple open file descriptions corresponding to a
file inode.
```

The key concept here is the inode. When I call open, it gives me a file descriptor 
that maps to a particular file inode.

After calling open, I use the returned file descriptor to monitor any changes made 
to the file's content.

When I ran the program and used echo to append lines to the file, everything worked 
as expected. The program picked up the changes and printed them out immediately.

However, things got weird when I tried editing the file using Neovim. I added a 
line at the end and saved it.

Nothing happened.

My program didn’t detect any changes. But when I used nano to modify the file, 
the output appeared as expected. This raised a question: what exactly makes Vim 
and Neovim behave differently when saving changes to a file?

